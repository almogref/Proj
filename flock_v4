%%%-------------------------------------------------------------------
%%% @author ofek
%%% @copyright (C) 2019, <COMPANY>
%%% @doc
%%%
%%% @end
%%% Created : 05. Aug 2019 8:21
%%%-------------------------------------------------------------------
-module(flock_v4).
-author("ofek").

-behaviour(gen_server).

%% API
-export([start_link/1,normalize_2D/1]).

%% gen_server callbacks
-export([init/1,
  handle_call/3,
  handle_cast/2,
  handle_info/2,
  terminate/2,
  code_change/3]).

-record(state, {id, flocks, agents,agents_n, radius, master, dimension, drive_factor, w1, w2, w3, w4, myname, num, max}).


start_link(Name) ->
  gen_server:start_link({local, flock_v4}, flock_v4, [Name], []).

init(Name) ->
    State = #state{master = {comm,'almog@h-MBP-sl-lmwg'}, %% @TODO
    myname = {flock_v4,Name},
    agents_n =  [],
    dimension = {250,250},
    radius = 100,
    drive_factor = 3,
    w1 = 1,
    w2 = 1,
    w3 = 2,
    w4 = 0.3},
   spawn(fun() -> gen_server:call({comm,'almog@h-MBP-sl-lmwg'},{register,'a1@h-MBP-sl-lmwg'}) end),
  {ok,State}.

handle_cast(Request, State) ->
  case Request of
    stop -> done;
    %%---------------------------------
    {connect,Id} -> io:format("TEST: connect ~p ~n",[Request]),
      {noreply, State#state{ id = Id }};
    %%---------------------------------
    %% gen server receives from master: 1. list of Locations [{X,Y},...]
    %% 2. list containing all 4 nodes ip [F1,F2,F3,F4]
    %% -> server spawns birds at set locations
    {init,Locations,Flock_List} ->
      io:format("TEST: init on gen ~p ~n",[Request]),
      io:format("TEST: init on gen ~p ~n",[State]),
      Agents = spawn_flock(Locations,State#state.myname),
      Count = count(Locations),
      NewState = State#state{ agents = Agents, flocks = Flock_List, max = Count, num = Count},
      {noreply,NewState};

    %%---------------------------------
    {master_request}  ->     %io:format("MASTER req \n",[]),
      io:format("TEST: comm asks for ~p ~n",[Request]),
      request_new_locations(State),
      {noreply,State};

    %%---------------------------------
    {flock_request,Pid,Location} -> %io:format("Flock REQ\n",[]),
      Neighbors = get_Neighbors(State#state.agents,Location,100),% @TODO EXCLUDE MYSELF
      Pid ! {generate_loc,Neighbors},
      {noreply,State};
    %%---------------------------------

    {update,Agent} ->
      io:format("TEST: update ~p ~n",[Request]),
      %io:format("DONE",[]),
      Flock_i = match(State#state.flocks,
        State#state.dimension,
        get_loc(Agent)),
      if State#state.myname== Flock_i ->
        %io:format("STAY",[]),
        NewNum = State#state.num - 1,
        NewAgentList = State#state.agents_n ++ [Agent],
        NewState = State#state{agents_n = NewAgentList,num = NewNum};
        true->
          %io:format("Leave",[]),
          gen_server:cast(Flock_i,{add,Agent}),
          NewMax = State#state.max -1, NewNum = State#state.num - 1 ,
          NewState = State#state{max = NewMax, num = NewNum}
      end,
      if NewState#state.num == 0 ->
        %io:format("@checking NEWSTATE: ~w STATE: ~w@",[NewState#state.agents_n, State#state.agents_n]),
        State#state.id ! {package,change_setup(NewState#state.agents_n)},
        %gen_server:cast(NewState#state.master,{NewState#state.myname,NewState#state.agents}),
        %io:format("FINISH ~w ~w ~w",[NewState#state.agents_n,State#state.myname,Flock_i]),
        FinalState = NewState#state{ num = NewState#state.max,agents = NewState#state.agents_n, agents_n = []};
        true-> FinalState =NewState end,
      {noreply,FinalState};
    %%---------------------------------
    {add,Agent} ->
      io:format("TEST: add ~p ~n",[Request]),
      get_Pid(Agent) ! {change_flock, State#state.myname},
      NewAgentList = State#state.agents_n ++ [Agent],
      NewState= State#state{agents_n = NewAgentList,
        max = State#state.max +1,
        num = State#state.num +1},
      {noreplay,NewState} ;

    _ -> io:format("TEST: none ~p ~n",[Request]),{noreply,State}
  end.


handle_call(_Request,_From, State) ->
  {reply, ok, State}.


handle_info(_Info, State) ->
  io:format("TEST: none ~p ~n",[_Info]),
  {noreply, State}.

terminate(_Reason, _State) ->
  ok.

code_change(_OldVsn, State, _Extra) ->
  {ok, State}.




%%%===================================================================
%%% Internal functions
%%%===================================================================

%% spawns N Agents when N is the Size of received list
%% returns list of N agents
spawn_flock([],_) -> [];
spawn_flock([Location|T],Myname) ->
  Direction = gen_Di_2D(),
  Agent = {spawn(fun() ->agent(Location,Direction,Myname,[],1) end),{Location,Direction}},
  [Agent | spawn_flock(T,Myname)].

%% request from all flocks to return the neighbors of all agents
request_new_locations(State)->
  rnl_loop(State#state.agents,State#state.flocks).

rnl_loop([],_) -> [];
rnl_loop([{Pid,{Location,_}}|T],Flocks)->
  [gen_server:cast(Ip ,{flock_request,Pid,Location}) ||  Ip <- Flocks],
  rnl_loop(T,Flocks).

get_Neighbors(List,Location,Radius)->
  Is_inside = fun({X_0,Y_0},{_,{{X_1,Y_1},_}}) ->
    Delta_x = X_0 - X_1,
    Delta_y = Y_0 - Y_1,
    Distance_squared = Delta_x*Delta_x + Delta_y*Delta_y,
    Radius_squared = Radius*Radius,
    if Distance_squared < Radius_squared -> true;
      true -> false
    end end,
  [ Item || Item <- List , Is_inside(Location,Item)].

gen_Di_2D() ->
  X_Sign = rand:uniform(2), Y_Sign =rand:uniform(2),
  if X_Sign == 1 ->  X_vec = -rand:uniform() ; true-> X_vec = rand:uniform() end,
  if Y_Sign == 1 ->  Y_vec = -rand:uniform() ; true-> Y_vec = rand:uniform() end,
  Normal = math:pow(math:pow(X_vec,2) + math:pow(Y_vec,2) ,1/2),
  {X_vec/Normal,Y_vec/Normal}.

agent(Location, Di_2D, Flock, Temp_List, Pending) ->
  receive
    {generate_loc,Neighbors} ->
      Current = Pending -1,
      if Current =:= 0 ->
        {New_loc,New_Di} = generate_Stats(Temp_List ++ Neighbors,Location,Di_2D,{500,500}),
        %io:format("CHEKCH ~w \n",[self()]),
        gen_server:cast(Flock,{update,{self(),{New_loc,New_Di}}}),
        agent(New_loc,New_Di,Flock, [], 1 );
        true ->
          agent(Location,Di_2D,Flock, Temp_List ++ Neighbors, Current )
      end;
    {change_flock, New_flock} -> agent(Location,Di_2D,New_flock,Temp_List,Pending)
  end.

match([F1,F2,F3,F4],{Width,Height},Loc)->
  {X,Y} = Loc,
  Border_W = Width/2,
  Border_H = Height/2,
  if X < Border_W ->
    if Y < Border_H -> F2; true-> F3 end;
    true->
      if Y < Border_H -> F1; true-> F4 end
  end.

%--------------------------------------------
%--------------------------------------------


get_val({_,Val}) -> Val.
get_loc({_,{Loc,_}}) -> Loc.
get_Pid({Pid,{_,_}}) -> Pid.



generate_Stats(Neighbors_List,Location,Direction,{Width,Height}) ->
  Radius = 100,
  DriveFactor = 1,
  Cohesion_move = calculate_Cohesion(Neighbors_List,0,Location,{0,0},Direction), %% when 0!?!??!!
  Alignment = calculate_alignment(Neighbors_List,0,{0,0},Direction),
  Avoid_Neighbors = getNearby(self(),Location,(1/3)*Radius, Neighbors_List),
  Avoidance_move = calculate_avoidance(Avoid_Neighbors,0,Location,{0,0}),
  Stay_inside = keepInRadius({Width,Height},Location),
  Offset = composite(Cohesion_move,Alignment,Avoidance_move,Stay_inside),
  Velocity = mult_i_2D(Offset,DriveFactor),
  {sum_2D(Location,Velocity),normalize_2D(Offset)}.

calculate_alignment([],0,_,Static)-> Static;
calculate_alignment([],N,{X,Y},_)-> {X/N,Y/N};
calculate_alignment([{_,{_,Direction}}|T],N,{X,Y},Static)->
  {X_i,Y_i} = Direction,
  calculate_alignment(T,N+1, {X+X_i,Y+Y_i},Static).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% COHESION %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
calculate_Cohesion([],0,_,_,_) -> {0,0};
calculate_Cohesion([],N,{X_0,Y_0},{X,Y},{Xinit,Yinit}) -> {X/N - X_0,Y/N -Y_0};
%{Pre_sx,Pre_sy} = {X/N - X_0,Y/N -Y_0},
%{smooth_damp(Xinit,Pre_sx,1,2),smooth_damp(Yinit,Pre_sy,1,2)};
calculate_Cohesion([{_,{Location,_}}|T],N,{X_0,Y_0}, {X,Y}, TMP ) ->
  {X_i,Y_i} = Location,
  calculate_Cohesion(T,N+1,{X_0,Y_0},{X+X_i,Y+Y_i}, TMP).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Avoidance %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
calculate_avoidance([],0,_,_)-> {0,0};
calculate_avoidance([],N,_,{X,Y})-> {X/N,Y/N};
calculate_avoidance([{_,{Location,_}}|T],N,{X_0,Y_0},{X,Y})->
  {X_i,Y_i} = Location,
  calculate_avoidance(T,N + 1,{X_0,Y_0}, {X + X_0 -X_i ,Y + Y_0 - Y_i} ).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Composite %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
composite(Cohesion_move,Alignment,Avoidance_move,Stay_inside)->
  Partial_move = fun({X,Y},Weight)->
    Partial = {X*Weight,Y*Weight},
%IS NOT ZERO
    {Xp,Yp} = Partial,
    Squared_mag = Xp*Xp + Yp*Yp,
    Squared_weight = Weight*Weight,
    if Squared_mag > Squared_weight ->
      Normal = math:pow(Squared_mag,1/2),
      {(Xp/Normal)*Weight,(Yp/Normal)*Weight}; %Normalized doubled by weight
      true->
        Partial
    end
                 end,
  [{X0,Y0},{X1,Y1},{X2,Y2},{X3,Y3}] = [Partial_move(Cohesion_move,1),
    Partial_move(Alignment,2),
    Partial_move(Avoidance_move,3),
    Partial_move(Stay_inside,1)],
  {X0 +X1 +X2 +X3,Y0 + Y1 + Y2 +Y3}.

normalize_2D({X,Y})->
  Normal = math:pow(X*X + Y*Y,1/2),
  {X/Normal,Y/Normal}.

magnitude({X,Y})-> math:pow(X*X+Y*Y,1/2).
sum_2D({X0,Y0},{X1,Y1})-> {X0+X1,Y0+Y1}.
sub_2D({X0,Y0},{X1,Y1})-> {X0-X1,Y0-Y1}.
mult_i_2D({X,Y},C) -> {X*C,Y*C}.

keepInRadius(Dimension,Location)->
  {Width,Height} = Dimension,
  Center = {Width/2,Height/2},
  CenterOffset = sub_2D(Center,Location),
  Radius = Height/2,
  T = magnitude(CenterOffset)/(Radius),
  if T < 0.9 -> {0,0};
    true -> mult_i_2D(CenterOffset,T*T)
  end.


getNearby(PID,MyLocation,Radius,Agents)->
  Is_inside = fun(MyPID,{X_0,Y_0},{Other_PID,{{X_1,Y_1},_}}) ->
    if MyPID =:= Other_PID -> false;
      true->
        Delta_x = X_0 - X_1,
        Delta_y = Y_0 - Y_1,
        Distance_squared = Delta_x*Delta_x + Delta_y*Delta_y,
        Radius_squared = Radius*Radius,
        if Distance_squared < Radius_squared -> true;
          true -> false
        end
    end
              end,
  [ Item || Item <- Agents , Is_inside(PID,MyLocation,Item)].

count([]) -> 0;
count([_|T])-> count(T) + 1.

change_setup([]) ->[];
change_setup([{Pid,{Loc,Dir}}|T])-> [{Loc,to_Rad(Dir),Pid,red}] ++ change_setup(T).

to_Rad({X,Y})-> math:atan2(X,Y).
